一、get函数(仅能返回一条数据) 过滤单一结果

book = BookInfo.objects.get(id__exact = 1)   # 可以且仅可以返回一条数据。 没有数据或返回多条数据都会抛异常。

book = BookInfo.objects.get(id = 1)   # 简写形式。  __exact可以省略。返回模型对象

二、all函数 (查询所有)

books = BookInfo.objects.all()   # 查询所有。 返回QuerySet查询集(可以遍历)

三、filter函数 (条件查询) 过滤出多个结果

# 条件查询。(可以通过逗号,连接多个条件)  返回QuerySet查询集(可以遍历)

books = BookInfo.objects.filter(title__exact = '天龙八部')  # __exact 等于。 __exact 可以省略。 (__iexact 不区分大小写)

books = BookInfo.objects.filter(title__contains = '天')  # __contains 包含。模糊查询。 (__icontains 不区分大小写)

books = BookInfo.objects.filter(title__endswith = '部')  # __endswith 以..结尾。 __startswith 以..开头。 (__iendswith 不区分大小写)

books = BookInfo.objects.filter(title__isnull = False)  # __isnull 是否为空。 True：表示为null。 False表示not null。

books = BookInfo.objects.filter(id__in = [1,3,5])  # __in 范围查询。

books = BookInfo.objects.filter(id__gt = 3)  # __gt 大于。 __lt 小于。 __gte 大于等于。 __lte 小于等于。

books = BookInfo.objects.filter(pub_date__gt = date(1980,1,1))  # 日期查询。

books = BookInfo.objects.filter(pub_date__year = 1980)   # 日期查询。(year、month、day、week_day、hour、minute、second)

四、exclude函数 (filter函数取反)  排除掉符合条件剩下的结果

# 查询id不为3的所有图书。

books = BookInfo.objects.exclude(id = 3)  # 与filter函数作用相反。 返回QuerySet查询集(可以遍历)

五、order_by函数 (排序)

# 对查询结果进行排序。 返回QuerySet查询集(可以遍历)

books = BookInfo.objects.all().order_by('-id')   # 'id'表示升序； '-id'表示降序。

books = BookInfo.objects.order_by('-id')    #  .all()可以省略。 默认查询所有。 可以结合filter等函数一起使用 。


1）相等
exact：表示判等。
例：查询编号为1的图书。
BookInfo.objects.filter(id__exact=1)
可简写为：
BookInfo.objects.filter(id=1)

2）模糊查询
contains：是否包含。
说明：如果要包含%无需转义，直接写即可。
例：查询书名包含'传'的图书。
BookInfo.objects.filter(btitle__contains='传')
startswith、endswith：以指定值开头或结尾。

例：查询书名以'部'结尾的图书
BookInfo.objects.filter(btitle__endswith='部')
以上运算符都区分大小写，在这些运算符前加上i表示不区分大小写，如iexact、icontains、istartswith、iendswith.

3） 空查询
isnull：是否为null
例：查询书名不为空的图书。
BookInfo.objects.filter(btitle__isnull=False)

4） 多项查询
in：是否包含在指定项内。
例：查询编号为1或3或5的图书
BookInfo.objects.filter(id__in=[1, 3, 5])

5）比较查询
gt 大于 (greater then)
gte 大于等于 (greater then equal)
lt 小于 (less then)
lte 小于等于 (less then equal)
例：查询编号大于3的图书
BookInfo.objects.filter(id__gt=3)
不等于的运算符，使用exclude()过滤器。
例：查询编号不等于3的图书
BookInfo.objects.exclude(id=3)

6）日期查询
year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。
例：查询1980年发表的图书。
BookInfo.objects.filter(bpub_date__year=1980)
例：查询1980年1月1日后发表的图书。
BookInfo.objects.filter(bpub_date__gt=date(1990, 1, 1))

F对象
之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢？ 答：使用F对象，被定义在django.db.models中。
语法如下：
F(属性名)
例：查询阅读量大于等于评论量的图书。
from django.db.models import F

BookInfo.objects.filter(bread__gte=F('bcomment'))
可以在F对象上使用算数运算。
例：
查询阅读量大于2倍评论量的图书。
BookInfo.objects.filter(bread__gt=F('bcomment') * 2)

Q对象
多个过滤器逐个调用表示逻辑与关系，同sql语句中where部分的and关键字。
例：
查询阅读量大于20，并且编号小于3的图书。
BookInfo.objects.filter(bread__gt=20,id__lt=3)
或
BookInfo.objects.filter(bread__gt=20).filter(id__lt=3)
如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符，Q对象被义在django.db.models中。

语法如下：
Q(属性名__运算符=值)
例：查询阅读量大于20的图书，改写为Q对象如下。
from django.db.models import Q

BookInfo.objects.filter(Q(bread__gt=20))
Q对象可以使用&、|连接，&表示逻辑与，|表示逻辑或。

例：查询阅读量大于20，或编号小于3的图书，只能使用Q对象实现
BookInfo.objects.filter(Q(bread__gt=20) | Q(pk__lt=3))
Q对象前可以使用~操作符，表示非not。

例：查询编号不等于3的图书。
BookInfo.objects.filter(~Q(pk=3))

聚合函数
使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和，被定义在django.db.models中。

例：查询图书的总阅读量。
from django.db.models import Sum

BookInfo.objects.aggregate(Sum('bread'))
注意aggregate的返回值是一个字典类型，格式如下：
  {'属性名__聚合类小写':值}
  如:{'bread__sum':3}
使用count时一般不使用aggregate()过滤器。

例：查询图书总数。
BookInfo.objects.count()
注意count函数的返回值是一个数字。

2.3 排序
使用order_by对结果进行排序
BookInfo.objects.all().order_by('bread')  # 升序
BookInfo.objects.all().order_by('-bread')  # 降序

2.4 关联查询
由一到多的访问语法：
一对应的模型类对象.多对应的模型类名小写_set
例：
b = BookInfo.objects.get(id=1)
b.heroinfo_set.all()

由多到一的访问语法:
多对应的模型类对象.多对应的模型类中的关系类属性名
例：
h = HeroInfo.objects.get(id=1)
h.hbook

访问一对应的模型类关联对象的id语法:
多对应的模型类对象.关联类属性_id

例：
h = HeroInfo.objects.get(id=1)
h.hbook_id

关联过滤查询 由多模型类条件查询一模型类数据:

语法如下：
关联模型类名小写__属性名__条件运算符=值
注意：如果没有"__运算符"部分，表示等于。

例：
查询图书，要求图书英雄为"孙悟空"
BookInfo.objects.filter(heroinfo__hname='孙悟空')
查询图书，要求图书中英雄的描述包含"八"
BookInfo.objects.filter(heroinfo__hcomment__contains='八')
由一模型类条件查询多模型类数据:

语法如下：
一模型类关联属性名__一模型类属性名__条件运算符=值
注意：如果没有"__运算符"部分，表示等于。

例：
查询书名为“天龙八部”的所有英雄。
HeroInfo.objects.filter(hbook__btitle='天龙八部')
查询图书阅读量大于30的所有英雄
HeroInfo.objects.filter(hbook__bread__gt=30)


